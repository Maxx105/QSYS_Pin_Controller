-- Pin Controller Plugin
-- by Maxx Sanner
-- February 2022

-- Information block for the plugin
PluginInfo = {
  Name = "My Plugins~Pin Controller",
  Version = "1.0",
  BuildVersion = "1.0.0.0",
  Id = "f0d901de-d6e6-41ec-844b-8ddc6a8ad238",
  Author = "Maxx Sanner",
  Description = "A simple plugin to get and set the UCI pins found in Core Manager"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Pin Controller\nv" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  -- if props.Model ~= nil and props.Model.Value ~= "" then
  --   table.insert(model, { props.Model.Value } )
  -- else
  --   table.insert(model, { "Base Model" } )
  -- end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name = "CreatePin",
    ControlType = "Button",
    ButtonType = "Trigger",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
    Icon = "Plus"
  })
  table.insert(ctrls, {
    Name = "Refresh",
    ControlType = "Button",
    ButtonType = "Trigger",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
    Icon = "Refresh"
  })
  table.insert(ctrls, {
    Name = "PinNames",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "Pin",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "NewPinName",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "NewPinPin",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "Status",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  if CurrentPage == "Control" then
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "Pin Controller",
      Fill = {210,220,255},
      StrokeWidth = 1,
      Position = {3,2},
      Size = {369,370},
      CornerRadius = 8
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "PIN NAMES",
      Position = {36,25},
      Size = {136,25},
      FontSize = 12,
      -- FontStyle = "Bold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "PIN",
      Position = {195,25},
      Size = {136,25},
      FontSize = 12,
      -- FontStyle = "Bold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "NEW PIN NAME",
      Position = {36,158},
      Size = {136,25},
      FontSize = 12,
      -- FontStyle = "Bold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "NEW PIN",
      Position = {195,158},
      Size = {136,25},
      FontSize = 12,
      -- FontStyle = "Bold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "STATUS",
      Position = {36,270},
      Size = {136,25},
      FontSize = 12,
      -- FontStyle = "Bold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "ADD A NEW PIN:",
      Position = {99,118},
      Size = {162,24},
      FontSize = 12,
      -- FontStyle = "Bold",
      HTextAlign = "Center"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "___________________________________________________",
      Position = {13,94},
      Size = {349,24},
      FontSize = 14,
      -- FontStyle = "Bold",
      HTextAlign = "Center"
    })
  
  
    layout["CreatePin"] = {
      PrettyName = "New Pins~Add Pin",
      Style = "Button",
      Position = {36,221},
      Size = {295,35},
      Color = {255,255,255},
      UnlinkOffColor = true,
      OffColor = {124,124,124}
    }
    layout["Refresh"] = {
      PrettyName = "Refresh",
      Style = "Button",
      Position = {36,330},
      Size = {295,35},
      Color = {255,255,255},
      UnlinkOffColor = true,
      OffColor = {124,124,124}
    }
    layout["PinNames"] = {
      PrettyName = "Current Pins~Pin Names",
      Style = "ComboBox",
      Position = {36,50},
      Size = {136,28},
      FontSize = 12
    }
    layout["Pin"] = {
      PrettyName = "Current Pins~Pin",
      Style = "Text",
      Position = {195,50},
      Color = {194,194,194},
      Size = {136,28},
      FontSize = 12
    }
    layout["NewPinName"] = {
      PrettyName = "New Pins~New Pin Name",
      Style = "Text",
      Position = {36,183},
      Size = {136,28},
      FontSize = 12
    }
    layout["NewPinPin"] = {
      PrettyName = "New Pins~New Pin",
      Style = "Text",
      Position = {195,183},
      Size = {136,28},
      FontSize = 12
    }
    layout["Status"] = {
      PrettyName = "Status",
      Style = "Text",
      Position = {36,293},
      Color = {194,194,194},
      Size = {295,30},
      FontSize = 12
    }
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  json = require("rapidjson")
  
  -- Controls
  local pinNames = Controls["PinNames"]
  local pin = Controls["Pin"]
  local newPinName = Controls["NewPinName"]
  local newPinPin = Controls["NewPinPin"]
  local createPin = Controls["CreatePin"]
  local status = Controls["Status"]
  local refresh = Controls["Refresh"]
  local initTimer = Timer.New()
  
  local pinData = {}
  local newPinData = ""
  
  function setPinNamesTbl(data)
    local pinNamesTbl = {}
    for i, v in ipairs(data) do 
      table.insert(pinNamesTbl, v.name)
    end
    pinNames.Choices = pinNamesTbl
  end
  
  function setError(code, data)
    if code ~= 200 and code ~= 204 then 
      status.String = json.decode(data).code..": "..json.decode(data).message
    end
  end
  
  function handleGet(tbl, code, d, e) 
    print(string.format("Response Code for GET: %i\t\tErrors: %s\rData: %s",code, e or "None", d))
    setError(code, d)
    pinData = json.decode(d).items
    setPinNamesTbl(pinData)
  end
  
  function handlePost(tbl, code, d, e)
    print(string.format("Response Code for POST: %i\t\tErrors: %s\rData: %s",code, e or "None", d))
    setError(code, d)
    getPinData()
  end
  
  function getIndexInTable(tbl, val)
    local index={}
    for k,v in pairs(tbl) do
      index[v]=k
    end
    return index[val]
  end
  
  function setPin()
    local index = getIndexInTable(pinNames.Choices, pinNames.String)
    pin.String = pinData[index].pin
  end
  
  function clearStatus()
    status.String = ""
  end
  
  --http
  function getPinData() 
    HttpClient.Download { 
      Url = "http://127.0.0.1/api/v0/systems/1/ucis/pins", 
      Headers = { ["Content-Type"] = "application/json" } , 
      Timeout = 5, 
      EventHandler = handleGet
    }
  end
  
  function postPinData(data) 
    newPinName.String = ""
    newPinPin.String = ""
    HttpClient.Upload { 
      Url = "http://127.0.0.1/api/v0/systems/1/ucis/pins", 
      Method = "POST",
      Headers = { 
        ["Content-Type"] = "application/json"
      }, 
      Timeout = 5, 
      Data = data,
      EventHandler = handlePost
    }
  end
  
  pinNames.EventHandler = setPin
  refresh.EventHandler = function()
    getPinData()
    clearStatus()
    pinNames.String = ""
    pin.String = ""
  end
  createPin.EventHandler = function ()
    if newPinName.String ~= "" and newPinPin.String ~= "" then
      print("Pin added!")
      status.String = "Pin added!"
      postPinData(json.encode({{
        name = newPinName.String,
        pin = newPinPin.String
      }}))
      else 
        print("Please enter new pin name and string")
        status.String = "Please enter new pin name and string"
    end
  end
  
  initTimer:Start(3)
  initTimer.EventHandler = function()
    initTimer:Stop()
    getPinData()
  end
  
  clearStatus()
end
